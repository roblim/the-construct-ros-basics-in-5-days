// Generated by gencpp from file bb8_move_class_custom/BB8MoveServiceMessageRequest.msg
// DO NOT EDIT!


#ifndef BB8_MOVE_CLASS_CUSTOM_MESSAGE_BB8MOVESERVICEMESSAGEREQUEST_H
#define BB8_MOVE_CLASS_CUSTOM_MESSAGE_BB8MOVESERVICEMESSAGEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bb8_move_class_custom
{
template <class ContainerAllocator>
struct BB8MoveServiceMessageRequest_
{
  typedef BB8MoveServiceMessageRequest_<ContainerAllocator> Type;

  BB8MoveServiceMessageRequest_()
    : duration(0)  {
    }
  BB8MoveServiceMessageRequest_(const ContainerAllocator& _alloc)
    : duration(0)  {
  (void)_alloc;
    }



   typedef int32_t _duration_type;
  _duration_type duration;





  typedef boost::shared_ptr< ::bb8_move_class_custom::BB8MoveServiceMessageRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bb8_move_class_custom::BB8MoveServiceMessageRequest_<ContainerAllocator> const> ConstPtr;

}; // struct BB8MoveServiceMessageRequest_

typedef ::bb8_move_class_custom::BB8MoveServiceMessageRequest_<std::allocator<void> > BB8MoveServiceMessageRequest;

typedef boost::shared_ptr< ::bb8_move_class_custom::BB8MoveServiceMessageRequest > BB8MoveServiceMessageRequestPtr;
typedef boost::shared_ptr< ::bb8_move_class_custom::BB8MoveServiceMessageRequest const> BB8MoveServiceMessageRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bb8_move_class_custom::BB8MoveServiceMessageRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bb8_move_class_custom::BB8MoveServiceMessageRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bb8_move_class_custom::BB8MoveServiceMessageRequest_<ContainerAllocator1> & lhs, const ::bb8_move_class_custom::BB8MoveServiceMessageRequest_<ContainerAllocator2> & rhs)
{
  return lhs.duration == rhs.duration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bb8_move_class_custom::BB8MoveServiceMessageRequest_<ContainerAllocator1> & lhs, const ::bb8_move_class_custom::BB8MoveServiceMessageRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bb8_move_class_custom

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bb8_move_class_custom::BB8MoveServiceMessageRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bb8_move_class_custom::BB8MoveServiceMessageRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bb8_move_class_custom::BB8MoveServiceMessageRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bb8_move_class_custom::BB8MoveServiceMessageRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bb8_move_class_custom::BB8MoveServiceMessageRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bb8_move_class_custom::BB8MoveServiceMessageRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bb8_move_class_custom::BB8MoveServiceMessageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1f60182c6a4cf2e688b1837c24d5f12e";
  }

  static const char* value(const ::bb8_move_class_custom::BB8MoveServiceMessageRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1f60182c6a4cf2e6ULL;
  static const uint64_t static_value2 = 0x88b1837c24d5f12eULL;
};

template<class ContainerAllocator>
struct DataType< ::bb8_move_class_custom::BB8MoveServiceMessageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bb8_move_class_custom/BB8MoveServiceMessageRequest";
  }

  static const char* value(const ::bb8_move_class_custom::BB8MoveServiceMessageRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bb8_move_class_custom::BB8MoveServiceMessageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 duration    # The time (in seconds) during which BB-8 will keep moving in circles\n"
;
  }

  static const char* value(const ::bb8_move_class_custom::BB8MoveServiceMessageRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bb8_move_class_custom::BB8MoveServiceMessageRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.duration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BB8MoveServiceMessageRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bb8_move_class_custom::BB8MoveServiceMessageRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bb8_move_class_custom::BB8MoveServiceMessageRequest_<ContainerAllocator>& v)
  {
    s << indent << "duration: ";
    Printer<int32_t>::stream(s, indent + "  ", v.duration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BB8_MOVE_CLASS_CUSTOM_MESSAGE_BB8MOVESERVICEMESSAGEREQUEST_H
